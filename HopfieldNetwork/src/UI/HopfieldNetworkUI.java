/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import HopfieldNetwork.HopfieldNetwork;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author user
 */
public class HopfieldNetworkUI extends javax.swing.JFrame {

    public HopfieldNetwork hop;

    /**
     * Creates new form HopfieldNetworkUI
     */
    public HopfieldNetworkUI() {
        initComponents();
        hop = new HopfieldNetwork();
        InputTextField.setEnabled(false);
        VectorInputArea.setEnabled(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        inputMethodGroup = new javax.swing.ButtonGroup();
        FileModeRadioButton = new javax.swing.JRadioButton();
        InputLabel = new javax.swing.JLabel();
        InputTextField = new javax.swing.JTextField();
        BrowseButton = new javax.swing.JButton();
        ManualModeRadioButton = new javax.swing.JRadioButton();
        testField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TestButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        InputPane = new javax.swing.JScrollPane();
        VectorInputArea = new javax.swing.JTextArea();
        ShowMatrixButton = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hopfield Network");

        inputMethodGroup.add(FileModeRadioButton);
        FileModeRadioButton.setSelected(true);
        FileModeRadioButton.setText("File Mode");
        FileModeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileModeRadioButtonActionPerformed(evt);
            }
        });

        InputLabel.setText("Input File :");

        InputTextField.setEditable(false);
        InputTextField.setText("vectors.txt");

        BrowseButton.setText("Browse");
        BrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseButtonActionPerformed(evt);
            }
        });

        inputMethodGroup.add(ManualModeRadioButton);
        ManualModeRadioButton.setText("Manual Mode");
        ManualModeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualModeRadioButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Test Vector");

        TestButton.setText("Test");
        TestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestButtonActionPerformed(evt);
            }
        });

        jLabel6.setLabelFor(InputPane);
        jLabel6.setText("Input vectors");

        VectorInputArea.setColumns(20);
        VectorInputArea.setFont(new java.awt.Font("Segoe UI Symbol", 0, 14)); // NOI18N
        VectorInputArea.setRows(5);
        VectorInputArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        InputPane.setViewportView(VectorInputArea);

        ShowMatrixButton.setText("Show Matrix");
        ShowMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowMatrixButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ManualModeRadioButton)
                    .addComponent(jLabel6)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(ShowMatrixButton)
                            .addGap(18, 18, 18)
                            .addComponent(TestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(InputPane, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(testField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(FileModeRadioButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(InputLabel)
                        .addGap(18, 18, 18)
                        .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BrowseButton)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(FileModeRadioButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputLabel)
                    .addComponent(InputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseButton))
                .addGap(51, 51, 51)
                .addComponent(ManualModeRadioButton)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(InputPane, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TestButton)
                    .addComponent(ShowMatrixButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileModeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileModeRadioButtonActionPerformed
        if (FileModeRadioButton.isEnabled()) {
            ManualModeRadioButton.setSelected(false);
            // Disable Manual Input option
            VectorInputArea.setEnabled(false);
            // Enable File Input
            BrowseButton.setEnabled(true);
        }
    }//GEN-LAST:event_FileModeRadioButtonActionPerformed

    private void BrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose file");
        int result = chooser.showSaveDialog(null);
        File file = chooser.getSelectedFile();
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String line;
            String[] lines;

            if ((line = br.readLine()) != null) {
                lines = line.split(" ");
                hop.M = Integer.parseInt(lines[0]);
                hop.N = Integer.parseInt(lines[1]);
                hop.vectors = new double[hop.M][hop.N];
            }
            for (int i = 0; i < hop.M; i++) {
                line = br.readLine();
                lines = line.split(" ");
                for (int j = 0; j < hop.N; j++) {
                    hop.vectors[i][j] = Integer.parseInt(lines[j]);
                }
            }
            hop.vectors = hop.ConvertToBipolar(hop.vectors);
            hop.PrintVectors();
            InputTextField.setText(file.getPath());
        } catch (IOException e) {
            // Print in popup window "Invalid path to file"
            e.printStackTrace();
        } catch (IndexOutOfBoundsException e) {

        }
    }//GEN-LAST:event_BrowseButtonActionPerformed

    private void ManualModeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualModeRadioButtonActionPerformed
        if (ManualModeRadioButton.isEnabled()) {
            // Disable File Selection option
            FileModeRadioButton.setSelected(false);
            BrowseButton.setEnabled(false);
            InputTextField.setEnabled(false);
            
            // Enable Manual Input
            VectorInputArea.setEditable(true);
            VectorInputArea.setEnabled(true);
        }
    }//GEN-LAST:event_ManualModeRadioButtonActionPerformed

    private void TestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestButtonActionPerformed
        String resultInfo = "";
        if (ManualModeRadioButton.isSelected()) {
            if (ReadFromTextArea()) {
                if (ReadTestVector()) {
                    resultInfo = CalculateResult();
                    JOptionPane.showMessageDialog(null, resultInfo);
                } else {
                    JOptionPane.showMessageDialog(null, "Input test vector!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Invalid vector data!");
            }
        }
        else {
            if (ReadTestVector()) {
                resultInfo = CalculateResult();
                JOptionPane.showMessageDialog(null, resultInfo);
            } else {
                //JOptionPane.showMessageDialog(null, "Input test vector!");
            }
        } 

    }//GEN-LAST:event_TestButtonActionPerformed

    private void ShowMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowMatrixButtonActionPerformed
        if(hop.T == null){
            JOptionPane.showMessageDialog(null, "First click \"Test\"");
        }
        else{
            String res = hop.StringMatrix(hop.T);
            JOptionPane.showMessageDialog(null, res);
        }
    }//GEN-LAST:event_ShowMatrixButtonActionPerformed

    private String CalculateResult() {
        String resultInfo = "";
        hop.FormMatrixT();
        if (hop.T == null) {
            JOptionPane.showMessageDialog(null, "Invalid vector data!");
        }
        double[][] calcRes = hop.CalculateOutputVector();
        if (calcRes.length == 1) { // Output of a single vector
            resultInfo = "Output vector: [";
            for (int i = 0; i < calcRes[0].length; i++) {
                resultInfo += calcRes[0][i];
                if (i != (calcRes[0].length - 1)) {
                    resultInfo += " , ";
                }
            }
            resultInfo += "]\n";
            if (hop.MatrixEqual(calcRes, hop.testVector) != true) {
                resultInfo += "The vector is not stable";
            } else {
                resultInfo += "The vector is stable";
            }
        } else {
            resultInfo = "Cycle of length 2 with the vectors\n[ ";
            for (int i = 0; i < calcRes[0].length; i++) {
                resultInfo += calcRes[0][i];
                if (i != (calcRes[0].length - 1)) {
                    resultInfo += " , ";
                }
            }
            resultInfo += " ]\n[ ";
            for (int i = 0; i < calcRes[1].length; i++) {
                resultInfo += calcRes[1][i];
                if (i != (calcRes[1].length - 1)) {
                    resultInfo += " , ";
                }
            }
            resultInfo += " ]";
        }
        return resultInfo;
    }

    private boolean ReadFromTextArea() {
        String input = VectorInputArea.getText();
        String[] lines = input.split("\n");
        double[][] matrix = new double[lines.length][lines[0].split(" ").length];
        String[] row;
        int rowLength = 0;
        for (int i = 0; i < lines.length; i++) {
            row = lines[i].split(" ");
            if (i == 0) {
                rowLength = row.length;
            }
            if (row.length == rowLength) {
                for (int j = 0; j < row.length; j++) {
                    matrix[i][j] = Double.parseDouble(row[j]);
                }
            } else {
                return false;
            }
        }
        hop.M = matrix.length;
        hop.N = matrix[0].length;
        hop.vectors = hop.ConvertToBipolar(matrix);
        return true;
    }

    private boolean ReadTestVector() {
        String line = testField.getText();
        String elements[] = line.split(" ");
        if (elements.length != hop.N) {
            JOptionPane.showMessageDialog(this, "Test vector is not valid!");
            return false;
        }
        hop.testVector = new double[1][elements.length];
        for (int i = 0; i < elements.length; i++) {
            hop.testVector[0][i] = Integer.parseInt(elements[i]);
        }
        hop.testVector = hop.ConvertToBipolar(hop.testVector);
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HopfieldNetworkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HopfieldNetworkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HopfieldNetworkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HopfieldNetworkUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HopfieldNetworkUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseButton;
    private javax.swing.JRadioButton FileModeRadioButton;
    private javax.swing.JLabel InputLabel;
    private javax.swing.JScrollPane InputPane;
    private javax.swing.JTextField InputTextField;
    private javax.swing.JRadioButton ManualModeRadioButton;
    private javax.swing.JButton ShowMatrixButton;
    private javax.swing.JButton TestButton;
    private javax.swing.JTextArea VectorInputArea;
    private javax.swing.ButtonGroup inputMethodGroup;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField testField;
    // End of variables declaration//GEN-END:variables
}
